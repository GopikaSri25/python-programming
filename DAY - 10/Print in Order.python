import time
from functools import wraps

class Foo(object):
    def __init__(self):
        self.priority_schedule = {
            self.first.__name__: False,
            self.second.__name__: False,
            self.third.__name__: False
        }
        self.first = self.scheduled_func(
            self.first
        )
        self.second = self.scheduled_func(
            self.second, self.first
        )
        self.third = self.scheduled_func(
            self.third, self.second
        )

    def scheduled_func(self, func, wait_for = None):
        @wraps(func)
        def inner(*args, **kwargs):
            if func.__name__ not in self.priority_schedule:
                return

            if wait_for is None or wait_for.__name__ not in self.priority_schedule:
                result = func(*args, **kwargs)
                self.priority_schedule[func.__name__] = True
                return result

            for _ in range(len(self.priority_schedule) * 20):
                is_waiter_completed = self.priority_schedule[wait_for.__name__]
                if is_waiter_completed:
                    self.priority_schedule[wait_for.__name__] = False
                    result = func(*args, **kwargs)
                    
                    self.priority_schedule[func.__name__] = True
                    return result
                time.sleep(0.05)
            raise RuntimeError()
        return inner

    def first(self, printFirst):
        printFirst()


    def second(self, printSecond):
        printSecond()
            
            
    def third(self, printThird):
        printThird()
